UVa quicklink: http://uva.onlinejudge.org/external/abc/abcde.html

TODO make a coherent taxonomy later

-: tested
*: untested, problem seems to be a fit for given algorithm

list of problems for testing different kinds of algorithms and methods. that
problem p is listed under algorithm a does not necessarily mean that a is the
best algorithm for solving p (sometimes it's definitely not). in some cases the
algorithm is only a minor part of a larger program, in these cases the
algorithm is marked with (subroutine). if the algorithm is an extremely minor
part it's not listed.

list of abbreviations i've used and their associated online judges:

UVa                http://uva.onlinejudge.org/
UVa-live archive   http://icpcarchive.ecs.baylor.edu/ or http://livearchive.onlinejudge.org/
SPOJ               http://www.spoj.pl/
Topcoder           http://www.topcoder.com/tc
POJ                http://poj.org/
Project Euler      http://projecteuler.net/
IPSC               http://ipsc.ksp.sk/
Codeforces         http://codeforces.com/
USACO competitions http://ace.delos.com/contestgate
USACO training     http://ace.delos.com/usacogate
codechef           http://www.codechef.com/
Timus              http://acm.timus.ru/

(often problems from regionals and subregionals are listed directly without an
online judge ID. regionals are at live-archive, while subregionals and other
competitions have to be hunted down. many are listed here:
http://www.pvv.org/~spaans/train.html )

algorithm classification is rather ad hoc, improve later.

1 graph theory
1.1 network flow
1.1.1 maxflow

- UVa 563 (with node splitting, huge, sparse graph needing edge list) (good for
  testing correctness of edge list max flow, but bad for benchmarking)
  (commonly called "the escape problem") (warning, there can be multiple banks
  on one cell. in this case, return not possible)
- UVa 753
- UVa 820
- UVa 10249
- UVa 10330
- UVa 10480
- UVa 10779
- Topcoder SRM 422-div1-hard "WorkersOnPlane"
* UVa 10092
* UVa 10511
* UVa 10594
* UVa 10735
* UVa 10989
* UVa 11506
* IDI Open 2007 E "party"
* IDI Open 2013 "booking services"
* Topcoder TCO 2005 round 3 easy "PlayingCubes"
* Topcoder TCO 2005 semifinal 3 medium
* NCPC 2005 G "kingdom"
* IPSC 2014 M1 "maximum enjoyment"

place these in either bipartite, maxflow or mincostmaxflow (the first category
  that applies)

* Topcoder TCCC 2004 finals hard
* UVa 11528
* UVa live 3708 (NEERC 2006 G "graveyard") (+ binary search)
* UVa 11381 (mincost)
* UVa 10911
* UVa 10380
* UVa-live 2354

1.1.1.1 minimum cut

- UVa 10480
* UVa 10989
* UVa 11506

1.1.2 mincost maxflow

- UVa 10746
- UVa 10806
- IPSC 2005 F "find the right words"
- NWERC 2012 A "admiral"
- Topcoder SRM 506 div 1 600 "SlimeXGrandSlimeAuto"
- Topcoder TCO 2013 round 1A hard "DirectionBoard"
* Topcoder SRM 372 div 1 1000 "RadarGuns" (both min- and maxcost)
* UVa 10594?
* Topcoder TCO 2005 semifinal room 3, div 1 medium "Conference"
* UVa-live 2927
* UVa-live 3550
* UVa-live 3562
* SPOJ 387 TOURS
* Codeforces 164C VK cup 2012 round 3 C "Machine programming" (?)

1.1.3 maximum cardinality (or perfect) matching in bipartite graph

- Topcoder SRM 200 div 1 hard "Graduation" (+careful graph construction to
  satisfy lexicographically smallest)
- Topcoder SRM 236 div 1 1000 "Parking" (+binary search)
- Topcoder SRM 303 div 1 500 "Knights"
- Topcoder SRM 477 div 1 500 "PythTriplets"
- Topcoder SRM 549 div 1 250 "PointyWizardHats"
- Topcoder TCO 2003 semifinals 4 1050
- UVa 259 (very small constraints, my backtrack solution is faster)
- UVa 663
- UVA 670
- UVa 753 (maxflow is faster, floyd-warshall is expensive)
- UVa 10080
- UVa 10092 (plain bipartite is slow, higher capacity or proper maxflow is
  better)
- UVa 10122
- UVa 10349
- UVa 10804 (+binary search)
- UVa 11418
- UVa 11419 (+output vertex cover with könig's theorem)
- Uva-live 4288 (NWERC 2008 problem C)
- BAPC 2006 F (hnu 11025) (let left side be doors+times, sort by
  increasing time)
- NWERC 2005 G "guardian of decency"
- IDI Open 2010 B "beehive epidemic"
- IDI Open 2012 A "boss rush"
- IPSC 2003 A "arranging flowers"
- IPSC 2004-practice T "the tiling problem"
* IDI Open 2009 F "train tickets"
* UVa 10380
* Topcoder TCO 2005 round 3 easy "PlayingCubes"
* Topcoder SRM 447 div 1 500 "PeopleYouMayKnow"
* Topcoder SRM 327 div 1 1000 "PostfixRLE" (among other algorithms)
* Topcoder TCO 2003 semifinal round 4 hard "RookAttack"
* Topcoder TCO 2009 qual 1 "PrimePairs"
* UVa 10243
* UVa 10418
* UVa 10615
* UVa 10735
* UVa 10984
* UVa 11045
* UVa 11138
* UVa 11159
* UVa 11262
* UVa 10511 (oh really?)
* UVa-live 4407
* POJ 3614/SDIBT 2247 (USACO NOV07 gold problem 3 "tanning"/"suncreen")
  (maxflow isn't the intended algorithm, might not even be possible)

1.1.3.1 maximum/minimum weight matching in bipartite graph (assignment
  problem/hungarian algorithm)

- UVa 10072
- UVa 10888
- UVa 11383 (reading off node weights, rather obscure solution)
- Topcoder SRM 371 div 1 500 "ChessMatchup"
- Topcoder SRM 372 div 1 1000 "RadarGuns" (both min and max)
- Topcoder SRM 526 div 1 250 "DucksAlignment" (this algorithm is overkill
  for this problem)
- Project Euler 345
* Topcoder SRM 506 div 1 600 "SlimeXGrandSlimeAuto" (add multiple walk, add
  dummy districts of cost 0)

1.1.3.2 minimum vertex cover in bipartite graph (könig's theorem)

- UVA 11419

1.1.4 maximum matching in "tripartite graph"

- SPOJ 9890 (NWERC 2011 problem D)
- Topcoder SRM 422 div 1 1000 "WorkersOnPlane"
- Topcoder SRM 575 div 1 1000 "TheTilesDivOne"

1.2 shortest-path
1.2.1 one-to-all shortest-path
1.2.1.1 dijkstra

- UVa 721
- UVa 10171
- UVa 10806
- UVa 10986
- UVa-live 4374 (NEERC 2008 problem D)
- SPOJ 3465 DRIVE (NEERC 2008 problem D) (good stress test for Dijkstra)
- NWERC 2012 A "admiral"

1.2.1.1.1 dijkstra with costs on nodes instead of edges

- UVa 929
- Project Euler 83

1.2.1.2 bellman-ford

- UVa 515
- UVa 10806
- NWERC 2012 A "admiral"

1.2.1.3 johnson's algorithm
1.2.2 all-pairs shortest-path
1.2.2.1 floyd-warshall

- UVa 104 (find "negative" weight cycle)
- Topcoder SRM 551, div 1 450 "ColorfulWolves"
- Topcoder SRM 551, div 1 450 "ColorfulWolves"

1.3 graph search
1.3.1 uninformed search
1.3.1.1 breadth-first search

- UVa 851
- UVa 10422 (huge state space, but it fits in memory)
- UVa 10704
- UVa 10796
- UVa 12101
- UVa 12491
- UVa live 3639 (NWERC 2006 problem G)
- Topcoder SRM 576 div 1 256 "ArcadeManao"
- IPSC 2013 L "labyrinth" (easy input)
* Topcoder TCO 06 round 2 hard

1.3.1.1.1 0-1-breadth-first search (bfs in a graph with edge costs 0 or 1)

- UVa 10770 (exponential-sized state space with tricky encoding)

1.3.1.1.2 breadth-first search with multiple queues

1.3.1.2 depth-first search

* IDI Open 2013 "neurotic network"

1.3.1.3 flood fill

- IDI Open 2013 "csi: p15"

1.3.2 bidirectional search
1.3.2.1 bidirectional breadth-first search

* free willy (?) from idi open

1.3.3 informed search
1.3.3.1 A*

- UVa-live 4374 (NEERC 2008 problem D)
- UVa 851
* UVa 10181

1.4 strongly connected components

- UVa 11504
- UVa 11709
- UVa live 4287 (NWERC 2008 problem B)
- IPSC 2014-practice U "urban planning"
* UVa 125
* UVa 247
* UVa 1227
* UVa 10319
* UVa 10510
* UVa 10731
* UVa 11324
* UVa 11390
* UVa 11721
* UVa 11770
* UVa 11838

1.5 topological sort

- UVa 103
- UVa 715 (need to consider the set of all topological sorts)
- UVa 11686
- UVa 12466
- IDI Open 2013 "neurotic network"
* UVa 124
* UVa 196
* UVa 200
* UVa 872
* UVa 925
* UVa 10259
* UVa 10305
* UVa 11060
* UVa 11174
* UVa 11680
* UVa 11724
* UVa 11060

1.6 steiner tree

- Project Euler 143

1.6.1 discrete steiner tree

- UVa 10863
- NWERC 2006 problem D "ticket to ride"
* Topcoder SRM 303 div 1 1000 "FourBears"

1.7 eulerian path/cycle
1.8 degree properties
1.9 connectivity
1.9.1 articulation point in graph

- UVa 315 (n<=100)
* UVa 10199 (n<=100)
* UVa 10765?
* SPOJ 3977 POLQUERY (n<=100000, e<=500000)

1.9.2 bridge in graph

* UVa 610
* UVa 796
* SPOJ 3977 POLQUERY (n<=100000, e<=500000)

1.9.3 biconnected components

* SPOJ 3977 POLQUERY (n<=100000, e<=500000)

1.10 planarity

- UVa 10768

1.11 hamilton path/cycle

- UVa 775 (n<=256 but still easy)
- hacker.org, puzzle Oneofus

1.11.1 shortest hamilton path/cycle aka travelling salesman

- UVa 216 (n<=8)
- UVa 10496 (n<=10)
- IDI Open 2013 "travelling cellsman" (grid graph)
* http://cstest.scu.edu.cn/soj/problem.action?id=3310 (n<=30)

1.11.2 longest simple path in general graph

* IPSC 2013 G "grid travel" (grid graph)

1.12 maximum matching in general graph (edmond's blossom algorithm)

- UVa 11439 (+ binary search)
- Topcoder TCO06 Round 1 350
- Topcoder SRM 477 div 1 500 "PythTriplets" (the graph is non-trivially
  bipartite)
- UVa Live 3820 (South Pacific 2007 problem I: Mr. Thompson's Problem)
- UVa Live 4130 (South Pacific 2008 problem H: P2P Currency Service)
- GCJ AMER semifinal 2008, problem D: King
* UVa 11156?
* Topcoder SRM 303 div 1 500 "Knights"

1.12.1 weighted maximum matching in general graph (sum of weights)

- UVa 10296

1.13 minimum spanning tree
1.13.1 minimum spanning tree in undirected graph

- UVa 10397
- UVa 10842

1.13.1.1 prim's algorithm

- NWERC 2005 D "ticket to ride" (kruskal might be too slow)

1.13.1.2 kruskal's algorithm

- UVa 10147 (using prim's is more hassle)
- UVa 10369 (prim's won't work here)

1.13.2 minimum spanning tree (minimum arborescence) in directed graph

1.14 diameter of undirected graph

- UVa 1056

1.15 maximum/minimum sets of various properties

1.15.1 maximum clique (subset of nodes such that induced subgraph is complete)
       maximum independent set (set of nodes having no edges in common), equivalent

- Topcoder SRM 571 div 1 500 "MagicMolecule"
- Topcoder SRM 589 div 1 450 "GearsDiv1"

1.15.2 minimum vertex cover (set of nodes such that all edges are incident to node from set)

1.15.3 minimum edge cover (set of edges such that all vertices are incident to edge from set)

2 dynamic programming
2.1 longest increasing/decreasing/common subsequence

- UVa 10534 (preferably n log k)
- NCPC 2007 G "Nested dolls"
* UVa 103
* UVa 111
* UVa 231
* UVa 481 (need O(n log k))
* UVa 497
* UVa 10051
* UVa 10534 (need O(n log k))
* UVa 11790
* UVa 11003
* UVa 11456
* UVa-live 2815

2.2 coin change

* UVa 147
* UVa 166
* UVa 351
* UVa 674
* UVa 10306
* UVa 10313
* UVa 11137
* UVa 11517

2.3 edit/levenshtein distance and similar

- UVa 363
- UVa 10069
- UVa 10739 (palindrome variant)

2.4 bitmask dp (straightforward use of bitmask to mark selected elements
    and similar)

- UVa 10296
- UVa 10496
- UVa 10746
- NCPC 2007 D "Copying DNA"
* Topcoder SRM 310 div 1 900 "BoxTower"
* UVa 10911
* UVa 10364
* UVa 10651
* UVa 10908
* Uva-live 3136

2.5 frontier (profile) dp (represent frontier between processed and
    unprocessed portions of a partially completed domain)

- GCJ AMER semifinal 2008, problem D: King
- Project Euler 161
- Project Euler 189
- Project Euler 215
- Project Euler 237
- Project Euler 393
- IDI Open 2013 "kings on a chessboard"
* Project Euler 289
* Timus 1519
* Topcoder SRM 532 div2-hard "DengklekPaintingSquares"
* Topcoder problem (early, around 200-300) exam seating thing in classroom
* hangzhou dianzi (HDU) 4285 http://acm.hdu.edu.cn/showproblem.php?pid=4285
* ZOJ 3213 http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3213

2.6 longest/shortest/number of paths/other processing in DAG

- UVa 103
- UVa 10051
- IDI Open 2013 "neurotic network"

2.7 other dp

- UVa 108 (max subrectangle sum)
- UVa 757
- UVa 10001
- UVa 10157
- UVa 10271
- UVa 10304
- UVa 10306
- UVa 11450 (knapsack variant)
- Codeforces 131 Div 1 C
- Topcoder TCCC05 Qual 5 Hard "NestedRandomness"
- Topcoder TCO07 Round 4 easy "PolishNotation"
- Topcoder TCO07 Round 4 hard "FourSubstrings"
- Topcoder SRM 564 div1-medium "AlternateColors2"
- Topcoder SRM 578 div 1 250 "GooseInZooDivOne"
- Topcoder SRM 578 div 1 500 "WolfInZooDivOne"
- NWERC 2012 B "beer pressure"
- NWERC 2012 E "edge case"
- IPSC 2013 K "knee problems"
* UVa 10003
* UVa 836 (max subrectangle sum)
* UVa 10074 (max subrectangle sum)
* UVa 10667 (max subrectangle sum)
* UVa 10827 (max subtorus sum)
* UVa 562 (knapsack)
* UVa 990 (knapsack)
* UVa 10130 (knapsack)
* UVa-live 3619 (knapsack)
* UVa 116
* UVa 473
* UVa 607
* UVa 10337
* UVa 10243
* UVa 10891
* UVa 11307
* UVa-live 3404

unclassified:
* UVa 11450
* SPOJ 101
* UVa-live 4106
* UVa-live 4143
* UVa 590
* UVa 910
* UVa 10681
* UVa 10702
* Uva-live 4201
* UVa-live 4106
* UVa-live 4143
* UVa-live 4146
* UVa-live 4336
* UVa-live 4337
* UVa-live 4525
* UVa-live 4526
* UVa-live 4643
* UVa-live 3685
* UVa-live 3794
* UVa-live 3794
* UVa-live 3902
* UVa-live 4141

even more dp problems (from spoj):
http://apps.topcoder.com/forums/?module=Thread&threadID=674592&start=0

3 math
3.1 number theory
3.1.1 prime numbers

- Project Euler 7
- Project Euler 10

3.1.1.1 primality testing
3.1.1.1.1 miller-rabin

- UVa 10956
- Project Euler 387

3.1.1.2 factorization

- Project Euler 3
- SPOJ 4942 (15 digits)
* SPOJ 4941 (20 digits)
* SPOJ 4948 (29 digits)

3.1.1.2.1 pollard rho

- UVa 11476
- spoj 4942 (15 digits)
- spoj divsum something?

3.1.1.3 sieve of erathostenes

- UVa 12101
- UVa live 3639 (NWERC 2006 problem G)

3.1.2 number of divisors
3.1.3 sum of divisors

- spoj 1392

3.1.3.1 inverse sum of divisors

- idi open 2012 "inverse divisor sums"

3.1.4 euler's totient function (phi)

- Project Euler 214
- Project Euler 351
- UVa 12493
* UVa 10179
* UVa 10299
* UVa 10820
* UVa 11064
* UVa 11327

3.1.4.1 inverse euler's totient

- UVa 11073
- Project Euler 248
* UVa 10837

3.1.5 gcd/lcm

- UVa 766 (subroutine)
- UVa 11417
- Project Euler 5

3.1.5.1 extended euclid

- UVa 10090

3.1.6 pythagorean triplets

- Topcoder SRM 477 div 1 500 "PythTriplets" (subroutine)

3.1.7 chinese remainder theorem

- IPSC 2005 G "gears in action"

3.2 linear algebra

3.2.1 solve a set of linear equations: gaussian elimination

- UVa 472 (over the complex numbers)
- UVa 766 (over fractions)
- KTH Challenge 2012 F "xor maximization" (over GF(2))

3.2.2 "incremental" gaussian elimination (gauss + DP)

- Project Euler 232
- a hard problem from topcoder a few months ago (2011-ish) TODO

3.3 probability
3.3.1 transition matrix

- IDI Open "typing monkey"

3.4 geometry
3.4.1 geometry on integer grid

3.4.1.1 pick's theorem

- UVa 10088
* one more which i've forgotten. i think it was an old regional where we
  were asked to deduce the formula

3.4.1.2 triangle

3.4.1.2.1 triangle medians (line from vertex to midpoint of opposing line)

- UVa 10347

3.4.2 computational geometry

3.4.2.1 convex hull

- UVa 109
- UVa 596 (include collinear points on hull)
- UVa 675
- UVa 811
* UVa 132
* UVa 218 (include collinear points on hull, i think)
* UVa 361
* UVa 681
* UVa 10002
* UVa 10065
* UVa 10078
* UVa 10135
* UVa 10173
* UVa 11626
* UVa 11769

3.4.2.1.1 convex hull in 3D

* a problem from spoj?

3.4.2.2 intersection
3.4.2.2.1 circle-circle

- UVa 453

3.4.2.3.2 convex polygon-convex polygon

- UVa 137

3.4.2.3.3 simple polygon-simple polygon

* ACM World finals 1998 F "polygon intersections" (UVa 805 with no dataset)

3.4.2.3.4 line-line
3.4.2.3.4 circle-line

3.4.2.4 area/volume/surface etc
3.4.2.4.1 area of polygon

- UVa 109
- UVa 12300

3.4.3 triangles
3.4.3.1 pythagorean triangles

- Project Euler 9

3.4.4 point inside polygon

- UVa 109
- UVa 10112 (triangles only)

3.4.5 distance from point to line segment

- IDI open 2013 "space travel"

3.4.5.1 distance from point to line segment in 3D

- IDI open 2013 "space travel"

3.4.5.2 distance from line segment to line segment in 3D

- IDI open 2013 "space travel"

3.5 combinatorics
3.5.1 permutations without duplicates
3.5.1.1 iterate over all permutations

- NWERC 2005 problem D "bowlstack"

3.5.1.2 permutation rank/unrank (no duplicates) 

- UVa 10181
- Project Euler 24

3.5.2 permutations with duplicates
3.5.2.1 iterate over all permutations with duplicates
3.5.2.2 permutation rank/unrank (duplicates allowed)

- BAPC 2009 D

3.5.3 partitions

3.5.4 set partitions
3.5.4.1 iterate over all set partitions

- NWERC 2006 problem D "ticket to ride"

3.5.5 subsets
3.5.5.1 iterate over all subsets

- NWERC 2006 problem D "ticket to ride"

3.6 calculus
3.7 "trick" problems
3.7.1 parity

- IDI open 2009 I "Marble Madness"
- UVa 10771

3.8 arithmetic
3.8.1 biginteger

- UVa 10069 (addition)
- UVa 10157 (addition)
- UVa 10814 (gcd, modulo, division)
- UVa 288 (addition, subtraction, multiplication, pow) + negative numbers)
- UVa 324 (multiplication)
- NWERC 2012 E "edge case" (addition)
* UVa 254
* UVa 290
* UVa 424
* UVa 465
* UVa 485
* UVa 495
* UVa 568
* UVa 619
* UVa 623
* UVa 713
* UVa 763
* UVa 787
* UVa 10007
* UVa 10012
* UVa 10013
* UVa 10070
* UVa 10083
* UVa 10106
* UVa 10108
* UVa 10131
* UVa 10162
* UVa 10183
* UVa 10198
* UVa 10207
* UVa 10213
* UVa 10220
* UVa 10247
* UVa 10254
* UVa 10275
* UVa 10302
* UVa 10303
* UVa 10328
* UVa 10329
* UVa 10334
* UVa 10359
* UVa 10450
* UVa 10494
* UVa 10519
* UVa 10523
* UVa 10527
* UVa 10579
* UVa 10606
* UVa 10643
* UVa 10669
* UVa 10694
* UVa 10722
* UVa 10862
* UVa 10925
* UVa 10992
* UVa 11115
* UVa 11161
* UVa 11375
* UVa 11438
* UVa 11544
* UVa 11645
* UVa 11664
* UVa 11721
* UVa 11734
* UVa 11821
* SPOJ 4941 (FACT1) (factorization, 20 digits)
* SPOJ 4948 (FACT2) (factorization, 29 digits)

3.8.1.1 advanced biginteger (more involving than +-*/%, like sqrt, log)

- UVa 10023

3.8.2 bigdecimal

3.8.3 matrices

3.8.3.1 matrix exponentiation with square-and-multiply

- UVa 10229
- UVa 12470
- IDI open 2007 (?) virus-problem

3.8.4 digit sum

- UVa 12517 (digit sum in a range)

3.8.5 powers
3.8.5.1 sum of powers, sum_i x^i

- IPSC 2005 problem B2 (bottom coder)

3.8.6 binary arithmetic
3.8.6.1 gray codes

- IPSC 2003 practice T (strange numbers)

3.9 numerical optimization
3.9.1 unconstrained optimization
3.9.2 constrained optimization
3.9.2.1 linear programming

* IPSC 2014 M "maximum enjoyment"

3.9.2.1.1 system of difference constraints

- UVa 515

3.10 interpolation
3.10.1 lagrange interpolation

- NWERC 2005 problem A "unequalled consumption" (+ dp, LCM, binary search)

3.10.2 newton interpolation

3.11 misc math

3.11.1 Collatz conjecture (3n+1 problem)

- UVa 100

4 greedy

- UVa 10249
* UVa 10094 (find any solution to n-queens problem)
* UVa 714 (+ discrete binary search)
* UVa 410
* UVa 10020
* UVa 10340
* UVa 10440
* UVa 10670
* UVa 10763
* UVa 11054
* UVa 11292
* UVa 11369

5 ad-hoc
5.1 simulation

- UVa 101
- UVa 10796 (hard)
- NWERC 2005 problem C "laserbox"
* UVa 10363
* UVa 10082
* UVa 661

5.2 specific domains
5.2.1 games
5.2.1.1 chess

- UVa 10383 (retrograde analysis)

5.2.1.2 sokoban

- UVa 10770 (solve)

5.2.1.3 sliding-block puzzles

* Topcoder SRM 353 div 1-1000 "FurnitureRobbery" (not sure if it's even possible)

5.2.1.3.1 rush hour

- UVa 10704 (solve)

5.2.1.3.2 15-puzzle

- UVa 716 (generalised, check solvability)
- UVa 10181 (solve)

5.2.1.4 nurikabe

- UVa-live 4103 (Tehran 2007 problem J) (solve)
- IDI Open 20?? (verify filled-in board)

5.2.1.5 slitherlink

- UVa-live 3848 (North-America Mid-Central 2007 problem C)
- UVa-live 5126 (TODO find contest)
* Topcoder marathon 78 "FixTheFence"

5.2.1.6 sudoku

- zstu 1076 (SEERC 2006) (solve 16x16 sudoku)

5.3 "gotcha"

- NCPC 2006 G "Whac-a-Mole" (go outside maze)
- UVa 10771 (parity)
- UVa 10796 (exception to "cannot pass" restriction)
- IDI Open 20?? marble madness (parity)

5.4 calendar

- Project Euler 19

5.5 roman numerals

* UVa 344
* UVa 11616

5.6 7-segment number display

- NWERC 2012 D

6 string
6.1 palindromes

- UVa 10739

6.2 string search
6.2.1 knuth-morris-pratt

- UVa 10679
- UVa 12467 (search itself in reverse)

6.2.2 aho-corasick

* Topcoder SRM 519 div 1 medium "RequiredSubstrings"

6.3 lexicographic smallest rotation of cyclic string

- UVa 719
- NCPC 2005 problem H "necklace decomposition"

7 combinatorial game theory
7.1 impartial games
7.1.1 non-loopy impartial games (grundy number)

- Project Euler 366
- UVa 12469 (win-loss-minimax)
- IPSC 2008 G "game on words"

7.1.1.1 nim

7.1.1.2 composite games

- Topcoder SRM 561 div 1 medium

- Project Euler 301

7.1.2 loopy impartial games
7.2 partizan games
7.2.1 non-loopy partizan games
7.2.2 loopy partizan games
7.3 specific games

8 logic
8.1 "assume hypothesis, test it"

- Topcoder TCO 2011 Qual 1 250

8.2 satisfiability
8.2.1 2SAT

- NWERC 2012 I "Idol"
* IPSC 2004-practice T "the tiling problem"
* NCPC 2011 K "Kindergarten"
* NWERC 2011 D "Piece it together"
* Asia-Changchun 2012 B (Uva-live 6067) "Bit magic"

8.2.2 3SAT

- IPSC 2013 L "labyrinth" (hard input)

9 binary/boolean tricks
9.1 snoob/gosper's hack

- UVa 649 (subroutine)
* Topcoder SRM 523 div 1 900 "AlphabetPaths" (subroutine)
* Topcoder SRM 528 div 1 500 "SPartition" (subroutine)
* idi open 2012 civilization
* ulm 1996 problem F lotto

10 sorting

10.1 merge sort

10.1.1 count inversions using merge sort

[is's also possible to count the number of inversions using fenwick tree
or similar if the range of values is small. While it is possible to use
this technique even when the range is large (for instance, by using a map),
it is not recommended because it is much slower.]

- Topcoder SRM 234 div 1 850 "HowUnsorted"
- UVa 10810
* UVa 299
* UVa 10327
* http://acm.sgu.ru/problem.php?contest=0&problem=180
* http://acm.zju.edu.cn/show_problem.php?pid=1440
* http://spoj.sphere.pl/problems/BRICKS/
* KTH challenge 2011 problem D?
* NCPC 2012 problem B "bread sorting" (only need to calculate modulo 2)
* UVa 11495
* SPOJ 6256 INVCNT

11 search
11.1 binary search

- UVa 10566 (continuous)
- NWERC 2005 problem I "up the stairs" (discrete)
* UVa 679
* UVa 714 (discrete + greedy)
* UVa 957
* UVa 10077
* UVa 10341
* UVa 10369
* UVa 10474
* UVa 10611
* UVa 11262
* UVa-live 2565
* UVa-live 2949
* UVa-live 3795
* UVa-live 4445

11.2 ternary search

- IDI open 2013 "space travel"
- Topcoder SRM 543 div 1 500 "EllysRivers" (discrete) (subroutine)

12 data structures
12.1 segment tree
12.1.1 fenwick (binary indexed) tree

- idi open 2011 "Beads"
- NCPC 2010 I (2D tree)
- NCPC 2011 B "mega-inversions"
- NCPC 2012 B "bread sorting" (only need to count modulo 2)
- NCPC 2012 C "cookie selection" (needs ~1.2 GB RAM if done uncompressed)
- Topcoder SRM 234 div 1 850 "HowUnsorted" (+ interval compression or map)
- Topcoder SRM 310 div 1 500 "FloatingMedian"
- Topcoder Member SRM 482 div 1 250 "LockersDivOne"
- UVa 501
- UVa 1428
- UVa 10015
- UVa 10057
- UVa 10909
- UVa 11525
- UVa 12086
- UVa 12365
- NWERC 2011 problem C "movie collection" (SPOJ 9889, UVa 1513)
- SPOJ 6256 INVCNT
* poj 1990
* poj 1195 (2D)
* topcoder 2010 TCO semifinal 2 hard "FunnyGames"
* Topcoder SRM 315 div 2 900 "KidsGame"
* spoj 1029 MATSUM
* tju 3243
* spoj HORRIBLE
* spoj ORDERS
* spoj CTRICK
* codechef nov 10 "bombing"
* codechef TEMPQUE
* spoj 8406 TEMPLEQ
* ioi 2001 "mobiles" (2d)
* UVa 12232?
* UVa 10327
* UVa 11495

12.2 binary tree
12.2.1 self-balancing binary tree (with insert, delete, order statistics)
       (red-black tree, for example)

- NWERC 2011 problem C "movie collection" (SPOJ 9889, UVa 1513)
- UVa 501
- UVa 10909
- UVa 11525
* Topcoder SRM 310 div 1 medium "FloatingMedian"

12.2.2 "binary deletion tree" (no balancing) (with delete, order statistics)

- UVa 10909
- UVa 11525
- Topcoder Member SRM 482 div 1 250 "LockersDivOne"

12.2.3 binary tree for range (minimum) query (rmq)/segment tree

- timus 1846
* UVa 11235
* UVa 11297 (2D)
* uva 12299
* codechef FLIPCOIN
* UVa 11402
* UVa-live 2191
* UVa-live 3294 (2D)
* UVa-live 4108

12.2.3.1 range (minimum) query with range update (lazy propagation)

12.3 heap

- NCPC 2011 problem F "knigs of the forest" (maxheap)
* UVa 501
* NCPC 2012 C "cookie selection"

12.4 hash

- UVa 744
- UVa 851
- UVa 1152
- UVa 10181
- UVa 10226
- Google Code Jam 2012 Round 2 D-small
- Codeforces 131 div 1 A

12.5 square root buckets (for range minimum query (rmq), frequencies etc)

- UVa 12299
- NCPC 2005 F "worst weather ever"
- NCPC 2011 B "mega-inversions"
- SPOJ 61 BRCKTS
* UVa 12232?

12.6 disjoint-set

- UVa 10147
- UVa 10301
- UVa 10397
- IPSC 2005 C "crane operator"
- IPSC 2008 I "inventing test data"
- Topcoder SRM 578 div 1 250 "GooseInZooDivOne"
* Topcoder SRM 576 div 1 256 "ArcadeManao"
* UVa 459
* UVa 793
* UVa 912
* UVa 10158
* UVa 10301
* UVa 10369
* UVa 10505
* UVa 10583
* UVa 10608
* UVa 11503

13 compression

14 brute force
14.1 backtracking with pruning/branch and bound

- UVa 772
- NCPC 2010 problem H "polyomino powers"
- NWERC 2006 problem A "sudoku"
- NWERC 2012 H "hip to be square"
* UVa 750
* UVa 639
* UVa 193
* UVa 222
* UVa 524
* UVa 624
* UVa 729
* UVa 10285
* UVa 10496
* UVa-live 4793

14.2 generate all answers/candidates/elements
14.3 meet-in-the-middle (divide search space in half, process each half,
     combine)

- UVa 1152 (multiple ways to apply meet-in-the-middle)
- Project Euler 266
- Topcoder SRM 523 div 1 900 "AlphabetPaths"

14.4 try all combinations

- UVa 102 (only 6 combinations)
* UVa 725
* UVa 154
* UVa 441
* UVa 10662
* UVa 10360
* UVa 11804
* UVa 11242 (?)

15 "smart" brute force (try a subset of all combinations after making an
   observation)

- Topcoder TCO 2011 Qual 1 1000
- NWERC 2012 H "hip to be square"
- idi open 2012 "inverse divisor sums"

16 parsing

- UVa 692

16.1 lexical scanner

- UVa 12421

16.2 grammar parsing

16.2.1 process a parsed grammar

* UVa 10757 (the problem pretty much asks to implement SQL)
* UVa 12422
* UVa 12423 (actually, a full language interpreter)

17 output-based problems

* ACM World finals 1998 H "towers of powers" (Uva 807)
